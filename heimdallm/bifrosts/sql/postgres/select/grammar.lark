?start : full_query
full_query : \
    with_cte? \
    select_statement unions?

unions : union+
union : UNION (ALL | DISTINCT)? select_statement

select_statement : \
    SELECT _WS DISTINCT? selected_columns \
    _WS FROM _WS selected_table \
    (_WS joins)? \
    (_WS where_clause)? \
    (_WS group_by_clause)? \
    (_WS having_clause)? \
    (_WS order_by_clause)? \
    limit_placeholder \
    SEMICOLON?

with_cte : "with"i _WS cte ("," cte)*
cte : generic_alias _WS "as"i _WS "(" full_query ")"

// we use a placeholder for the limit clause because we need to be able to insert one
// automatically in the case of reconstruction. if we didn't have a placeholder, we'd
// have to examine ever clause child in `select_statement` to try to figure out where
// to insert our new limit. having a placeholder simplifies this greatly.
limit_placeholder : (_WS limit_clause)?

// serves as a basis for table and column names
// NOTE this is dialect specific
!quoted_identifier : "\"" IDENTIFIER "\""
unquoted_identifier : IDENTIFIER
IDENTIFIER : /[a-zA-Z_][a-zA-Z0-9_]*/

selected_table : aliased_table | table_name | derived_table
aliased_table : table_name as table_alias

table_name : quoted_identifier | unquoted_identifier
table_alias : generic_alias

selected_columns : selected_column ("," selected_column)*
// a selected column can be a value, not just a column name. a value encapsulates
// fully qualified column names, and also functions that use column names
selected_column : aliased_column | COUNT_STAR | value | ALL_COLUMNS
aliased_column : (value | COUNT_STAR | subquery) as generic_alias
// this is a "fully-qualified" column name, meaning it just has a table name prefixing
// it. keep in mind that the table may be an alias.
fq_column : table_name "." column_name
column_name : quoted_identifier | unquoted_identifier
column_alias : generic_alias

// having one generic alias rule makes it easier to check for reserved keywords
generic_alias : quoted_identifier | unquoted_identifier

joins : join+
join : join_type _WS joined_table _WS "on"i _WS join_condition (_WS "and"i join_condition)*
// note we do not allow outer joins. this is because we cannot control
// the rows that are returned by the outer join, and we cannot depend on the
// join conditions to restrict the returned rows.
// https://www.sqlite.org/syntax/join-operator.html
join_type : legal_join | illegal_join
legal_join : INNER_JOIN
illegal_join : CROSS_JOIN | NATURAL_JOIN | OUTER_JOIN | NATURAL_OUTER_JOIN
join_condition : connecting_join_condition | parameterized_comparison
// one side can be any value, but the other side must be a column
connecting_join_condition : fq_column EQUI_JOIN value
joined_table : aliased_table | table_name | derived_table

group_by_clause : GROUP_BY _WS group_by_column ("," group_by_column)*
group_by_column : value

having_clause : HAVING _WS having_condition
having_condition : value comparison value

order_by_clause : ORDER_BY _WS order_column ("," order_column)*
order_column : (COUNT_STAR | value) (_WS SORT_ORDER)?
SORT_ORDER : ASC | DESC

limit_clause : LIMIT (_WS ((offset ",")? limit) | (limit _WS OFFSET _WS offset))
limit : NUMBER
offset : NUMBER

where_clause : WHERE _WS where_conditions
where_conditions : where_condition (_WS WHERE_TYPE _WS where_condition)*
where_condition : \
    | parameterized_comparison
    | relational_comparison
    | in_comparison
    | between_comparison
    | fts_comparison
    | "(" where_conditions ")"

// a parameterized comparison is a parameterized, equality-based comparison that
// enforces a constraint on the returned rows.
parameterized_comparison.1 : lhs_req_comparison | rhs_req_comparison
lhs_req_comparison : (fq_column | column_alias) "=" placeholder
rhs_req_comparison : placeholder "=" (fq_column | column_alias)
relational_comparison : value comparison (value | subquery)
comparison : \
    EQ
    | NEQ
    | LT
    | GT
    | LTE
    | GTE
    | SIMILARITY
    | _WS (NOT _WS)? LIKE _WS
    | _WS IS _WS (NOT _WS)?
    | _WS (NOT _WS)? ILIKE _WS
    | _WS SIMILAR_TO _WS
in_comparison : value _WS (NOT _WS)? IN _WS (in_list | subquery)
in_list : "(" value ("," value)* ")"
between_comparison : value (_WS NOT)? _WS BETWEEN _WS value _WS AND _WS value
fts_comparison : value "@@" value

// for everywhere but the SELECT clause, because that's where column aliases
// are declared, so we cannot use this there
?value : PREFIX_CAST? (NUMBER
    | string
    | BOOLEAN
    | NULL
    | NUMBER_PREFIX? value_expr
    | NUMBER_PREFIX? fq_column
    | NUMBER_PREFIX? placeholder
    | NUMBER_PREFIX? column_alias
    | NUMBER_PREFIX? wrapped_value) SUFFIX_CAST?
    | interval_expr
    | DT_CONSTANT
subquery : "(" full_query ")"
derived_table : subquery as table_alias
wrapped_value : LPAREN value RPAREN
?value_expr : function | arith_expr
?arith_expr : value BINARY_OP value (BINARY_OP value)*
?interval_expr : INTERVAL _WS string

// a function with any number of arguments
function : FUNCTION_NAME "(" (AGG_FN_MODIFIER _WS)? (value ("," value)*)? ")"
    | SUBSTRING_FN_NAME "(" value (_WS "from"i _WS INT)? (_WS "for"i _WS INT)? ")"
    | EXTRACT_FN_NAME "(" DATE_PART "from"i value ")"
    | CAST_FN_NAME "(" value _WS "as"i _WS CAST_TYPE ")"
FUNCTION_NAME : /[a-zA-Z_]+/
SUBSTRING_FN_NAME : "substring"i
EXTRACT_FN_NAME : "extract"i
CAST_FN_NAME : "cast"i

BOOLEAN : TRUE | FALSE
?string : ESCAPE_PREFIX? ESCAPED_STRING

// a placeholder for a value passed in as a parameter at query execution time
placeholder: ":" IDENTIFIER

ESCAPE_PREFIX : "E"
SELECT : "select"i
FROM : "from"i
DISTINCT : "distinct"i
ALL : "all"i
UNION : "union"i
SEMICOLON : ";"
ALL_COLUMNS : "*"
WHERE : "where"i
WHERE_TYPE : AND | OR
ORDER_BY : "order"i _WS "by"i
LIMIT : "limit"i
OFFSET : "offset"i
GROUP_BY : "group"i _WS "by"i
HAVING : "having"i
WITH : "with"i
INTERVAL : "interval"i

DT_CONSTANT : CURRENT_DATE | CURRENT_TIME | CURRENT_TIMESTAMP
CURRENT_DATE : "current_date"i
CURRENT_TIME : "current_time"i
CURRENT_TIMESTAMP : "current_timestamp"i

// this is the only way that a query can have a "*" column spec, because it
// doesn't reveal any information that would be restricted.
COUNT_STAR : "count"i "(" (AGG_FN_MODIFIER _WS)? ("*" | "1") ")"
AGG_FN_MODIFIER : DISTINCT | ALL

INNER_JOIN : ("inner"i _WS)? "join"i
CROSS_JOIN : "cross"i _WS "join"i
NATURAL_JOIN : "natural"i _WS (("left"i | "right"i | "full"i | "inner"i) _WS)? "join"i
OUTER_JOIN : ("left"i | "right"i | "full"i) _WS ("outer"i _WS)? "join"i
NATURAL_OUTER_JOIN : "natural"i _WS (("left"i | "right"i | "full"i) _WS)? "outer"i _WS "join"i

ASC : "asc"i
DESC : "desc"i

AND : "and"i
OR : "or"i

// a rule instead of a terminal, so it can be present or not in the input, but the
// tree will always contain a placeholder for it, making tree validation easier than
// if it was sometimes there and sometimes not
as : (_WS "as"i _WS)?

// important! only allow an equi join, so we can carefully control the rows
// that the user has access to
EQUI_JOIN : "="

EQ : "="
NEQ : "!="
LT : "<"
GT : ">"
LTE : "<="
GTE : ">="
IS : "is"i
BETWEEN : "between"i
IN : "in"i
LIKE : "like"i
NOT : "not"i
REGEXP : "regexp"i
ILIKE : "ilike"i
SIMILAR_TO : "similar"i _WS "to"i
SIMILARITY : "%"

TRUE : "true"i
FALSE : "false"i
NULL : "null"i

LPAREN : "("
RPAREN : ")"

NUMBER_PREFIX : "+" | "-" | "~" | "@"
BINARY_OP : \
    "+"
    | "-"
    | "*"
    | "#"
    | "/"
    | "%"
    | "^"
    | "<<"
    | ">>"
    | "&"
    | "|"
    | "div"i
    | "mod"i
    | "||"

PREFIX_CAST : CAST_TYPE _WS
SUFFIX_CAST : "::" CAST_TYPE
CAST_TYPE : \
    "int"i
    | "float"i
    | "string"i
    | "bool"i
    | "timestamp"i
    | "date"i
    | "time"i
    | "inet"i
    | "json"i
    | "jsonb"i
    | "uuid"i
    | "regconfig"i

DATE_PART : \
    "century"i
    | "day"i
    | "decade"i
    | "dow"i
    | "doy"i
    | "epoch"i
    | "hour"i
    | "isodow"i
    | "isoyear"i
    | "microseconds"i
    | "millennium"i
    | "milliseconds"i
    | "minute"i
    | "month"i
    | "quarter"i
    | "second"i
    | "timezone"i
    | "timezone_hour"i
    | "timezone_minute"i
    | "week"i
    | "year"i

// in postgres, double quotes are used for quoting identifiers, single quotes for
// quoting strings. also, a single quote can be escaped by doubling it, and there are no
// other escape sequences. the below inner regex says "any character except a single
// quote, unless it is doubled"
ESCAPED_STRING : "'" /([^']|'')*/ "'"
_WS : WS

%import common.NUMBER
%import common.DIGIT
%import common.INT
%import common.WORD
%import common.WS
%import common._STRING_ESC_INNER
%ignore WS